pipeline {
    agent any
    options {
        timestamps()
    } // options
    stages{
        stage('test project') {
            agent { label 'python' } // agent
            steps {
                script {
                    withEnv(["path+sonar=${tool(name: 'SonarQube Scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation')}/bin"
                           , "path+python=${tool(name: '3.7', type: 'jenkins.plugins.shiningpanda.tools.PythonInstallation')}"]) {
                        withSonarQubeEnv(credentialsId: 'sonarqube-secret') {
                            sh "bash .build/scanner.sh"
                        } // withSonarQubeEnv
                    } // withEnv
                } // script
                junit( allowEmptyResults: true, testResults: 'reports/junit.xml' )

                timeout(10) {
                    script {
                        def qg = waitForQualityGate false // Reuse taskId previously collected by withSonarQubeEnv
                        if (qg.status != 'OK' && qg.status != 'SUCCESS') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } // qg.status
                    } // script
                } // timeout
            } // steps
        } // stage
        stage('docker it') {
            agent{ label 'docker' }
            steps {
                ansiColor('xterm') {
                    script {
                        docker.withRegistry('https://registry.mahillmann.de:5000', 'nexus') {
                            docker.build("scraper/ssl_exporter:${BRANCH_NAME}-build", ".").push("${BRANCH_NAME}")
                        } // withRegistry
                    } // script
                } // ansiColor
            } // steps
        } // stage - docker it
    } // stages
/*    post {
        always {
            cleanWs(deleteDirs: true, notFailBuild: true)
            sh 'find . -delete'
        } // always
    } // post
*/
} // pipeline