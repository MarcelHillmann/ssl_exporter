pipeline {
    agent any
    options {
        timestamps()
    } // options
    stages{
        stage('test project') {
            agent { label 'python' } // agent
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonarqube-secret') {
                        // "path+sonar=${tool(name: 'SonarQube Scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation')}/bin"
                        withEnv(["path+python=${tool(name: '3', type: 'jenkins.plugins.shiningpanda.tools.PythonInstallation')}"]) {
                            sh 'ls -l'
                            sh 'bash -x .build/scanner.sh'
                        } // withEnv
                    } // withSonarQubeEnv
                } // script
                junit( allowEmptyResults: true, testDataPublishers: [[$class: 'ClaimTestDataPublisher']], testResults: 'reports/junit.xml' )
            } // steps
        } // stage - test project
        stage("Quality Gate") {
            steps {
                timeout(10) {
                    withSonarQubeEnv(credentialsId: 'sonarqube-secret', installationName: 'SonarQube Scanner') {
                        waitForQualityGate( abortPipeline: true )
                    } // withSonarQubeEnv
                } // timeout
            } // steps
        } // stage
    } // stages
    post {
        always {
            cleanWs(deleteDirs: true, notFailBuild: true)
            sh 'find . -delete'
        } // always
    } // post
} // pipeline